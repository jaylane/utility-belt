stages:
  - build
  - deploy
  - promote

build:
  stage: build
  image: registry.gitlab.com/utilitybelt/packages/monocicd-build:1.0.14
  script:
    - echo "" > gitversion.env
    - values=$(dotnet-gitversion)
    - for s in $(echo $values | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do echo GV_$s >> gitversion.env; done
    - cat gitversion.env | grep -P "^GV_(AssemblySemVer|MajorMinorPatch|NuGetVersionV2|PreReleaseTag|InformationalVersion|Sha)" > build.env
    - cat build.env
    - source build.env
    - changelog=$(cat changelog/v${GV_MajorMinorPatch}.md changelog/vNext.md 2>/dev/null) || true
    - echo -e "Version:\n${GV_NuGetVersionV2}\nChange Log:\n${changelog}"
    - dotnet build -c Release -p:PackageReleaseNotes="\"${changelog}\""
  except:
    - tags
  artifacts:
    expire_in: 7 days
    paths:
      - './bin/'
    reports:
      dotenv: build.env

deploy gitlab installer:
  image: registry.gitlab.com/utilitybelt/packages/monocicd-build:1.0.14
  stage: deploy
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "bin/Release/${CI_PROJECT_TITLE}-Installer-${GV_NuGetVersionV2}.exe" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_TITLE}/${GV_NuGetVersionV2}/${CI_PROJECT_TITLE}-Installer-${GV_NuGetVersionV2}.exe"'
  except:
    - tags
  needs:
    - build

merge and tag release:
    stage: promote
    variables:
        PROJECT_COMMAND: merge-release-master --project=$CI_PROJECT_PATH --id=$CI_PROJECT_ID --sha=$CI_COMMIT_SHA --version=$GV_MajorMinorPatch --name=$CI_PROJECT_TITLE
    trigger: utilitybelt/mergebot
    rules:
        - if: $CI_COMMIT_BRANCH == "release"

promote to release candidate:
    stage: promote
    variables:
        PROJECT_COMMAND: make-release-candidate --project=$CI_PROJECT_PATH --id=$CI_PROJECT_ID --sha=$CI_COMMIT_SHA
    trigger: utilitybelt/mergebot
    when: manual
    rules:
        - if: $CI_COMMIT_BRANCH == "master"